In JavaScript, ES5 introduced several new methods for working with objects. These methods provide useful functionality for manipulating objects and their properties. Here are some of the key ES5 object methods:

Object.keys(obj):

This method returns an array of a given object's own enumerable property names (keys).
It does not include properties from the object's prototype chain.
javascript
Copy code
const myObj = { name: "John", age: 30 };
const keys = Object.keys(myObj);
console.log(keys); // ["name", "age"]
Object.values(obj):

This method returns an array of a given object's own enumerable property values.
It does not include values from the object's prototype chain.
javascript
Copy code
const myObj = { name: "John", age: 30 };
const values = Object.values(myObj);
console.log(values); // ["John", 30]
Object.entries(obj):

This method returns an array of a given object's own enumerable property [key, value] pairs.
It does not include entries from the object's prototype chain.
javascript
Copy code
const myObj = { name: "John", age: 30 };
const entries = Object.entries(myObj);
console.log(entries); // [["name", "John"], ["age", 30]]
Object.create(proto):

This method creates a new object with the specified prototype object.
It allows you to set up inheritance between objects.
javascript
Copy code
const parent = { x: 10, y: 20 };
const child = Object.create(parent);
console.log(child.x); // 10 (inherits from parent)
Object.defineProperty(obj, prop, descriptor):

This method allows you to define a new property directly on an object or modify an existing property.
You can specify various property attributes using the descriptor parameter.
javascript
Copy code
const myObj = {};
Object.defineProperty(myObj, "name", {
  value: "John",
  writable: false, // Cannot be changed
  enumerable: true,
});

console.log(myObj.name); // "John"
myObj.name = "Alice";    // Ignored due to writable:false
Object.freeze(obj):

This method freezes an object, making it read-only and preventing any modifications to its properties.
Attempts to change property values or add new properties will result in errors or be silently ignored.
javascript
Copy code
const myObj = { name: "John" };
Object.freeze(myObj);
myObj.name = "Alice";  // Ignored, no error
console.log(myObj.name); // "John"
Object.seal(obj):

This method seals an object, preventing the addition or deletion of properties while allowing property value changes.
Existing properties are marked as non-configurable.
javascript
Copy code
const myObj = { name: "John" };
Object.seal(myObj);
delete myObj.name;     // Ignored, no error
myObj.age = 30;        // Ignored, no error
myObj.name = "Alice";  // Allowed
